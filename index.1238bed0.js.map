{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState){\n        this.initialState = initialState || Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n        this.board = JSON.parse(JSON.stringify(this.initialState));\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    start() {\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    moveDown() {\n        this.move(\"down\");\n    }\n    moveUp() {\n        this.move(\"up\");\n    }\n    moveRight() {\n        this.move(\"right\");\n    }\n    moveLeft() {\n        this.move(\"left\");\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        return this.status;\n    }\n    restart() {\n        this.board = JSON.parse(JSON.stringify(this.initialState));\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    move(direction) {\n        const oldBoard = JSON.stringify(this.board);\n        if (this.status !== \"playing\") return;\n        if (direction === \"up\" || direction === \"down\") for(let col = 0; col < 4; col++){\n            let column = direction === \"up\" ? this.board.map((row)=>row[col]) : this.board.map((row)=>row[col]).reverse();\n            column = direction === \"up\" ? this.combineTiles(column) : this.combineTiles(column).reverse();\n            for(let row = 0; row < 4; row++)this.board[row][col] = column[row];\n        }\n        else if (direction === \"left\" || direction === \"right\") {\n            for(let row = 0; row < 4; row++)if (direction === \"left\") this.board[row] = this.combineTiles(this.board[row]);\n            else this.board[row] = this.combineTiles(this.board[row].reverse()).reverse();\n        }\n        if (oldBoard !== JSON.stringify(this.board)) this.addRandomTile();\n        this.endGame();\n    }\n    combineTiles(row) {\n        let newRow = row.filter((val)=>val !== 0);\n        for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n            newRow[i] *= 2;\n            this.score += newRow[i];\n            newRow[i + 1] = 0;\n        }\n        newRow = newRow.filter((val)=>val !== 0);\n        return newRow.concat(Array(4 - newRow.length).fill(0));\n    }\n    getEmptyCells() {\n        const emptyCells = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        return emptyCells;\n    }\n    addRandomTile() {\n        const emptyCells = this.getEmptyCells();\n        if (emptyCells.length === 0) return;\n        const { row: row, col: col } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n    endGame() {\n        let gameOver = true;\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (this.board[row][col] >= 2048) this.status = \"win\";\n            if (row < 3 && this.board[row][col] === this.board[row + 1][col] || col < 3 && this.board[row][col] === this.board[row][col + 1]) gameOver = false;\n        }\n        if (this.getEmptyCells().length === 0 && gameOver) this.status = \"lose\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    function updateButton() {\n        const button = document.querySelector(\".button\");\n        if ($09e991522ca7e64e$var$game.status === \"idle\") {\n            button.classList.remove(\"restart\");\n            button.classList.add(\"start\");\n            button.textContent = \"Start\";\n        } else {\n            button.classList.remove(\"start\");\n            button.classList.add(\"restart\");\n            button.textContent = \"Restart\";\n        }\n    }\n    function updateMessage() {\n        switch($09e991522ca7e64e$var$game.status){\n            case \"idle\":\n                document.querySelector(\".message-start\").classList.remove(\"hidden\");\n                document.querySelector(\".message-win\").classList.add(\"hidden\");\n                document.querySelector(\".message-lose\").classList.add(\"hidden\");\n                break;\n            case \"playing\":\n                document.querySelector(\".message-start\").classList.add(\"hidden\");\n                break;\n            case \"win\":\n                document.querySelector(\".message-win\").classList.remove(\"hidden\");\n                break;\n            case \"lose\":\n                document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n                break;\n            default:\n                break;\n        }\n        updateButton();\n    }\n    function getScore() {\n        document.querySelector(\".game-score\").textContent = $09e991522ca7e64e$var$game.score;\n    }\n    function updateBoard() {\n        const cells = document.querySelectorAll(\".field-cell\");\n        let index = 0;\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            const cell = cells[index];\n            cell.textContent = $09e991522ca7e64e$var$game.board[row][col] || \"\";\n            cell.className = `field-cell field-cell--${$09e991522ca7e64e$var$game.board[row][col]}`;\n            index++;\n        }\n    }\n    document.querySelector(\".button\").addEventListener(\"click\", ()=>{\n        if ($09e991522ca7e64e$var$game.status === \"idle\") $09e991522ca7e64e$var$game.start();\n        else $09e991522ca7e64e$var$game.restart();\n        updateMessage();\n        getScore();\n        updateBoard();\n    });\n    document.addEventListener(\"keydown\", (e)=>{\n        switch(e.key){\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n        }\n        updateMessage();\n        getScore();\n        updateBoard();\n    });\n});\n\n\n//# sourceMappingURL=index.1238bed0.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  function updateButton() {\n    const button = document.querySelector('.button');\n\n    if (game.status === 'idle') {\n      button.classList.remove('restart');\n      button.classList.add('start');\n      button.textContent = 'Start';\n    } else {\n      button.classList.remove('start');\n      button.classList.add('restart');\n      button.textContent = 'Restart';\n    }\n  }\n\n  function updateMessage() {\n    switch (game.status) {\n      case 'idle':\n        document.querySelector('.message-start').classList.remove('hidden');\n        document.querySelector('.message-win').classList.add('hidden');\n        document.querySelector('.message-lose').classList.add('hidden');\n        break;\n      case 'playing':\n        document.querySelector('.message-start').classList.add('hidden');\n        break;\n      case 'win':\n        document.querySelector('.message-win').classList.remove('hidden');\n        break;\n      case 'lose':\n        document.querySelector('.message-lose').classList.remove('hidden');\n        break;\n      default:\n        break;\n    }\n\n    updateButton();\n  }\n\n  function getScore() {\n    document.querySelector('.game-score').textContent = game.score;\n  }\n\n  function updateBoard() {\n    const cells = document.querySelectorAll('.field-cell');\n    let index = 0;\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const cell = cells[index];\n\n        cell.textContent = game.board[row][col] || '';\n        cell.className = `field-cell field-cell--${game.board[row][col]}`;\n        index++;\n      }\n    }\n  }\n\n  document.querySelector('.button').addEventListener('click', () => {\n    if (game.status === 'idle') {\n      game.start();\n    } else {\n      game.restart();\n    }\n\n    updateMessage();\n    getScore();\n    updateBoard();\n  });\n\n  document.addEventListener('keydown', (e) => {\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n\n    updateMessage();\n    getScore();\n    updateBoard();\n  });\n});\n","'use strict';\n\nclass Game {\n  constructor(initialState) {\n    this.initialState =\n      initialState || Array.from({ length: 4 }, () => Array(4).fill(0));\n    this.board = JSON.parse(JSON.stringify(this.initialState));\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  moveDown() {\n    this.move('down');\n  }\n\n  moveUp() {\n    this.move('up');\n  }\n\n  moveRight() {\n    this.move('right');\n  }\n\n  moveLeft() {\n    this.move('left');\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  restart() {\n    this.board = JSON.parse(JSON.stringify(this.initialState));\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  move(direction) {\n    const oldBoard = JSON.stringify(this.board);\n\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    if (direction === 'up' || direction === 'down') {\n      for (let col = 0; col < 4; col++) {\n        let column =\n          direction === 'up'\n            ? this.board.map((row) => row[col])\n            : this.board.map((row) => row[col]).reverse();\n\n        column =\n          direction === 'up'\n            ? this.combineTiles(column)\n            : this.combineTiles(column).reverse();\n\n        for (let row = 0; row < 4; row++) {\n          this.board[row][col] = column[row];\n        }\n      }\n    } else if (direction === 'left' || direction === 'right') {\n      for (let row = 0; row < 4; row++) {\n        if (direction === 'left') {\n          this.board[row] = this.combineTiles(this.board[row]);\n        } else {\n          this.board[row] = this.combineTiles(\n            this.board[row].reverse(),\n          ).reverse();\n        }\n      }\n    }\n\n    if (oldBoard !== JSON.stringify(this.board)) {\n      this.addRandomTile();\n    }\n\n    this.endGame();\n  }\n\n  combineTiles(row) {\n    let newRow = row.filter((val) => val !== 0);\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        this.score += newRow[i];\n        newRow[i + 1] = 0;\n      }\n    }\n\n    newRow = newRow.filter((val) => val !== 0);\n\n    return newRow.concat(Array(4 - newRow.length).fill(0));\n  }\n\n  getEmptyCells() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    return emptyCells;\n  }\n\n  addRandomTile() {\n    const emptyCells = this.getEmptyCells();\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const { row, col } =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  endGame() {\n    let gameOver = true;\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] >= 2048) {\n          this.status = 'win';\n        }\n\n        if (\n          (row < 3 && this.board[row][col] === this.board[row + 1][col]) ||\n          (col < 3 && this.board[row][col] === this.board[row][col + 1])\n        ) {\n          gameOver = false;\n        }\n      }\n    }\n\n    if (this.getEmptyCells().length === 0 && gameOver) {\n      this.status = 'lose';\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","Array","from","length","fill","board","JSON","parse","stringify","status","score","start","addRandomTile","moveDown","move","moveUp","moveRight","moveLeft","getScore","getState","getStatus","restart","direction","oldBoard","col","column","map","row","reverse","combineTiles","endGame","newRow","filter","val","i","concat","getEmptyCells","emptyCells","push","Math","floor","random","gameOver","document","addEventListener","updateMessage","querySelector","classList","remove","add","updateButton","button","textContent","updateBoard","cells","querySelectorAll","index","cell","className","e","key"],"version":3,"file":"index.1238bed0.js.map"}